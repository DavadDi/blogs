ACE学习综述
=====================


ACE项目的优点
--------------------------
* 可以跨平台使用，基本上可以实现一次编写，多平台运行。
* ACE本身不仅仅是一个简单的网络框架，对于网络框架涉及到的进程管理、线程管理等系统本身相关的内容也进行了统一的封装，甚至消息队列和内存管理等也都有统一封装。
* 代码的质量还是比较高，能经得起长时间运行的考验。
* 代码经过层层封装和模板通用性封装，仍然能够保持较高的性能。

ACE项目的缺点
--------------------------
* ACE的前身是 《Unix网络编程》，该书页数达上千页，包括了各种网络开发的细节、移植扩展和网络开发架构模式，这就要求使用ACE开发网络的人必须具备了较丰富的网络开发经验。
* ACE的代码已经比较庞大，且每个版本都有新功能加入，但是相关文档更新不及时。三本开发编程的书也都定位与基本的功能，想深入了解就必须从大量代码中选择代码阅读。
* 由于ACE定位是跨平台开发，各个开发平台上的网络实现和数据结构各不相同，因为代码中充斥了大量的宏来区分，对于阅读代码造成了一定的障碍。
* 学术性较强，设计模式与模板使用相对密集。阅读代码前需要先学习 POSA2 的图书。
* ACE的类继承关系略显负责，层次较多，不利于学习和分析。


Reactor使用过程中的注意事项
----------------------------

* 相对时间和绝对时间使用，相对超时时间常常用于这样的情况：操作可能会在能够继续执行之前迟滞，但只会被调用一次。 绝对时间常常被用于这样的情况：操作可能会通过循环多次调用。绝对时间的使用使得无需每次循环重新计算超时值。 具体可参考 《C++ 网络编程卷二》 中文 P45，副栏6。

* handle_*() 函数（Reactor会忽略handle_close的返回值）的返回值，决定着Reactor后续对相关MASK的处理。 == 0 正常处理  > 0 Reactor继续为此事件检测和分配已经登记的时间。  == -1 Reactor应停止对时间处理器已经登记的MASK。 如何跟踪已经注册的事件，则可参考 《C++ 网络编程卷二》 P51， 副栏 10。

* 对于事件处理器的资源释放集中在其 handle_close 函数中进行。如果为动态分配的对象，可以在关闭所有资源后调用 delete this。

* reactor->remove_handler(eh,mask)，如果没有设置 ACE_Event_Handler::DONT_CALL 标志，会调用该 mask 的 handle_close 函数，因此如果在 handle_close 函数中调用 remove_handler 函数，需要添加ACE_Event_Handler::DONT_CALL 标志，避免 handle_close 的递归调用。